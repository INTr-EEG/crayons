<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2021.2.3">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data file delimiter" updates="None" val="auto" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expName, expInfo['ID'], expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'ID': '', 'Audio': &quot;['Yes', 'No']&quot;, 'Debug': &quot;['No', 'Yes']&quot;}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="HTML path" updates="None" val="" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Resources" updates="None" val="['resources\\seqs\\crayons-2yo.csv', 'resources\\aud\\rule-1-practice.m4a', 'resources\\aud\\rule-1-teaching.m4a', 'resources\\aud\\rule-2-practice.m4a', 'resources\\aud\\rule-2-teaching.m4a', 'resources\\aud\\rule-3-practice.m4a', 'resources\\aud\\rule-3-teaching-part-1.m4a', 'resources\\aud\\rule-3-teaching-part-2.m4a', 'resources\\aud\\rule-3-teaching-part-3.m4a', 'resources\\aud\\task-introduction.m4a', 'resources\\aud\\trials-go.m4a', 'resources\\aud\\trials-practice-again.m4a', 'resources\\imgs\\continue.png', 'resources\\imgs\\slides\\slide-03.png', 'resources\\imgs\\slides\\slide-04.png', 'resources\\imgs\\slides\\slide-06.png', 'resources\\imgs\\slides\\slide-07.png', 'resources\\imgs\\slides\\slide-09.png', 'resources\\imgs\\slides\\slide-10.png', 'resources\\imgs\\crayons\\boxlongoutline_whbg.png', 'resources\\imgs\\crayons\\boxlongred_whbg.png', 'resources\\imgs\\crayons\\boxshortoutline_whbg.png', 'resources\\imgs\\crayons\\boxshortred_whbg.png', 'resources\\imgs\\crayons\\longred_whbg_transp.png', 'resources\\imgs\\crayons\\longyellow_whbg_transp.png', 'resources\\imgs\\crayons\\shortred_whbg_transp.png', 'resources\\imgs\\crayons\\shortyellow_whbg_transp.png']" valType="list"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save hdf5 file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="height" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="[1920, 1080]" valType="list"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="#D8E6E4" valType="color"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="elAddress" updates="None" val="100.1.1.1" valType="str"/>
    <Param name="elDataFiltering" updates="None" val="FILTER_LEVEL_2" valType="str"/>
    <Param name="elLiveFiltering" updates="None" val="FILTER_LEVEL_OFF" valType="str"/>
    <Param name="elModel" updates="None" val="EYELINK 1000 DESKTOP" valType="str"/>
    <Param name="elPupilAlgorithm" updates="None" val="ELLIPSE_FIT" valType="str"/>
    <Param name="elPupilMeasure" updates="None" val="PUPIL_AREA" valType="str"/>
    <Param name="elSampleRate" updates="None" val="1000" valType="num"/>
    <Param name="elSimMode" updates="None" val="False" valType="bool"/>
    <Param name="elTrackEyes" updates="None" val="RIGHT_EYE" valType="str"/>
    <Param name="elTrackingMode" updates="None" val="PUPIL_CR_TRACKING" valType="str"/>
    <Param name="expName" updates="None" val="crayons" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="eyetracker" updates="None" val="None" valType="str"/>
    <Param name="gpAddress" updates="None" val="127.0.0.1" valType="str"/>
    <Param name="gpPort" updates="None" val="4242" valType="num"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
    <Param name="mgBlink" updates="None" val="('MIDDLE_BUTTON',)" valType="list"/>
    <Param name="mgMove" updates="None" val="CONTINUOUS" valType="str"/>
    <Param name="mgSaccade" updates="None" val="0.5" valType="num"/>
    <Param name="tbLicenseFile" updates="None" val="" valType="str"/>
    <Param name="tbModel" updates="None" val="" valType="str"/>
    <Param name="tbSampleRate" updates="None" val="60" valType="num"/>
    <Param name="tbSerialNo" updates="None" val="" valType="str"/>
  </Settings>
  <Routines>
    <Routine name="trial">
      <CodeComponent name="trial_code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="&amp;#10;score = 0&amp;#10;scores = []&amp;#10;cumulative_time = 0.0&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="score = 0;&amp;#10;scores = [];&amp;#10;cumulative_time = 0.0;&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if (skip_practice) {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;if ((trialNum === 1)) {&amp;#10;    if ((ruleNum !== 3)) {&amp;#10;        box1 = OBJS[&quot;long-red-crayon-box&quot;];&amp;#10;        box2 = OBJS[&quot;short-red-crayon-box&quot;];&amp;#10;    } else {&amp;#10;        box1 = OBJS[&quot;long-outline-crayon-box&quot;];&amp;#10;        box2 = OBJS[&quot;short-outline-crayon-box&quot;];&amp;#10;    }&amp;#10;}&amp;#10;box1.autoDraw = true;&amp;#10;box2.autoDraw = true;&amp;#10;CARD = OBJS[stimulus];&amp;#10;CARD.pos = CARD_POS0;&amp;#10;CARD.autoDraw = true;&amp;#10;dormant_card = CARD;&amp;#10;active_card = null;&amp;#10;moving_card = null;&amp;#10;drag_in_process = false;&amp;#10;DRAGGING = false;&amp;#10;feedback_delay_start = null;&amp;#10;picture_delay_start = 0.0;&amp;#10;choice = null;&amp;#10;correct = null;&amp;#10;trial_time = null;&amp;#10;x = 0;&amp;#10;y = 0;&amp;#10;coords_x = [];&amp;#10;coords_y = [];&amp;#10;coords_t = [];&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="&amp;#10;if skip_practice:&amp;#10;    continueRoutine = False&amp;#10;&amp;#10;if trialNum == 1:&amp;#10;    if ruleNum != 3:&amp;#10;        box1 = OBJS[&quot;long-red-crayon-box&quot;]&amp;#10;        box2 = OBJS[&quot;short-red-crayon-box&quot;]&amp;#10;    else:&amp;#10;        box1 = OBJS[&quot;long-outline-crayon-box&quot;]&amp;#10;        box2 = OBJS[&quot;short-outline-crayon-box&quot;]&amp;#10;&amp;#10;box1.autoDraw = True&amp;#10;box2.autoDraw = True&amp;#10;&amp;#10;CARD = OBJS[stimulus]&amp;#10;CARD.pos = CARD_POS0&amp;#10;CARD.autoDraw = True&amp;#10;&amp;#10;dormant_card = CARD&amp;#10;&amp;#10;#if practice_passed \&amp;#10;#or terminate_experiment \&amp;#10;#or (not SHOW_DEMO and is_demo):&amp;#10;#    continueRoutine = False&amp;#10;&amp;#10;#hide(GLOBAL_CONT)&amp;#10;&amp;#10;#dormant_card = make_img(&amp;#10;#    stimulus,&amp;#10;#    stimulus_file,&amp;#10;#    NEW_CARD_POS&amp;#10;#)&amp;#10;active_card = None&amp;#10;moving_card = None&amp;#10;drag_in_process = False&amp;#10;DRAGGING = False&amp;#10;&amp;#10;feedback_delay_start = None&amp;#10;picture_delay_start = 0.0&amp;#10;&amp;#10;choice = None&amp;#10;correct = None&amp;#10;trial_time = None&amp;#10;&amp;#10;x = 0&amp;#10;y = 0&amp;#10;coords_x = []&amp;#10;coords_y = []&amp;#10;coords_t = []&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="&amp;#10;# There will always be a delay...&amp;#10;if feedback_delay_start is not None:&amp;#10;    # Test no removing delay for non-practice&amp;#10;    if is_practice:&amp;#10;        feedback_delay = 0.5  # seconds&amp;#10;        if is_practice and correct == 0:&amp;#10;            # Longer delay for incorrect answer&amp;#10;            feedback_delay = 1.0  # seconds&amp;#10;        if t - feedback_delay_start &gt; feedback_delay:&amp;#10;            continueRoutine = False&amp;#10;    else:&amp;#10;        # No delay for non-practice&amp;#10;        continueRoutine = False&amp;#10;elif active_card is None and t &gt; 0.05:&amp;#10;    active_card = dormant_card&amp;#10;elif not drag_in_process and t &gt; 0.1:&amp;#10;    MOUSE_L = MOUSE.getPressed()[0]&amp;#10;    if MOUSE_L_prev != MOUSE_L:&amp;#10;        MOUSE_L_prev = MOUSE_L&amp;#10;        if MOUSE_L == 1:&amp;#10;            if MOUSE.isPressedIn(active_card):&amp;#10;                moving_card = active_card&amp;#10;                drag_in_process = True&amp;#10;&amp;#10;if MOUSE.getPressed()[0] == 1:&amp;#10;    if drag_in_process:&amp;#10;        moving_card.pos = MOUSE.getPos()&amp;#10;        x, y = moving_card.pos&amp;#10;        if len(coords_x) == 0 or dist_sq(coords_x[-1], coords_y[-1], x, y) &gt; MIN_DIST_SQ:&amp;#10;            coords_x.append(round_dp(x))&amp;#10;            coords_y.append(round_dp(y))&amp;#10;            coords_t.append(round_dp(t))&amp;#10;else:&amp;#10;    drag_in_process = False&amp;#10;    if moving_card is not None:&amp;#10;        # Made a choice&amp;#10;        if snapped(moving_card, box1):&amp;#10;            choice = box1.name&amp;#10;            moving_card.autoDraw = False&amp;#10;            moving_card.pos = CARD_POS0&amp;#10;        elif snapped(moving_card, box2):&amp;#10;            choice = box2.name&amp;#10;            moving_card.autoDraw = False&amp;#10;            moving_card.pos = CARD_POS0&amp;#10;        # Evaluate choice&amp;#10;        if choice is not None:&amp;#10;            trial_time = t&amp;#10;            cumulative_time += t&amp;#10;            feedback_delay_start = t&amp;#10;            if choice == corrAns:&amp;#10;                correct = 1&amp;#10;                if is_practice:&amp;#10;                    trial_feedback.text = &quot;Correct!&quot;&amp;#10;                score += 1&amp;#10;            else:&amp;#10;                correct = 0&amp;#10;                if is_practice:&amp;#10;                    trial_feedback.text = &quot;Let's think again&quot;&amp;#10;        moving_card = None&amp;#10;&amp;#10;if SHOW_DEBUG:&amp;#10;    trial_text.text = f&quot;&quot;&quot;&amp;#10;tryNum = {tryNum}&amp;#10;trialNum = {trialNum} (out of {maxScore})&amp;#10;score = {score} (out of {maxScore})&amp;#10;globalClock = {round(globalClock.getTime(), 3)}&amp;#10;t = {round(t, 3)}&amp;#10;&quot;&quot;&quot;&amp;#10;    if moving_card is not None:&amp;#10;        trial_text.text += f&quot;&quot;&quot;&amp;#10;moving_card.name = {moving_card.name}&amp;#10;pos = ({round(x, 3)}, {round(y, 3)})&amp;#10;&quot;&quot;&quot;&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="if ((feedback_delay_start !== null)) {&amp;#10;    if (is_practice) {&amp;#10;        feedback_delay = 0.5;&amp;#10;        if ((is_practice &amp;&amp; (correct === 0))) {&amp;#10;            feedback_delay = 1.0;&amp;#10;        }&amp;#10;        if (((t - feedback_delay_start) &gt; feedback_delay)) {&amp;#10;            continueRoutine = false;&amp;#10;        }&amp;#10;    } else {&amp;#10;        continueRoutine = false;&amp;#10;    }&amp;#10;} else {&amp;#10;    if (((active_card === null) &amp;&amp; (t &gt; 0.05))) {&amp;#10;        active_card = dormant_card;&amp;#10;    } else {&amp;#10;        if (((! drag_in_process) &amp;&amp; (t &gt; 0.1))) {&amp;#10;            MOUSE_L = MOUSE.getPressed()[0];&amp;#10;            if ((MOUSE_L_prev !== MOUSE_L)) {&amp;#10;                MOUSE_L_prev = MOUSE_L;&amp;#10;                if ((MOUSE_L === 1)) {&amp;#10;                    if (MOUSE.isPressedIn(active_card)) {&amp;#10;                        moving_card = active_card;&amp;#10;                        drag_in_process = true;&amp;#10;                    }&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if ((MOUSE.getPressed()[0] === 1)) {&amp;#10;    if (drag_in_process) {&amp;#10;        moving_card.pos = MOUSE.getPos();&amp;#10;        [x, y] = moving_card.pos;&amp;#10;        if (((coords_x.length === 0) || (dist_sq(coords_x.slice((- 1))[0], coords_y.slice((- 1))[0], x, y) &gt; MIN_DIST_SQ))) {&amp;#10;            coords_x.push(round_dp(x));&amp;#10;            coords_y.push(round_dp(y));&amp;#10;            coords_t.push(round_dp(t));&amp;#10;        }&amp;#10;    }&amp;#10;} else {&amp;#10;    drag_in_process = false;&amp;#10;    if ((moving_card !== null)) {&amp;#10;        if (snapped(moving_card, box1)) {&amp;#10;            choice = box1.name;&amp;#10;            moving_card.autoDraw = false;&amp;#10;            moving_card.pos = CARD_POS0;&amp;#10;        } else {&amp;#10;            if (snapped(moving_card, box2)) {&amp;#10;                choice = box2.name;&amp;#10;                moving_card.autoDraw = false;&amp;#10;                moving_card.pos = CARD_POS0;&amp;#10;            }&amp;#10;        }&amp;#10;        if ((choice !== null)) {&amp;#10;            trial_time = t;&amp;#10;            cumulative_time += t;&amp;#10;            feedback_delay_start = t;&amp;#10;            if ((choice === corrAns)) {&amp;#10;                correct = 1;&amp;#10;                if (is_practice) {&amp;#10;                    trial_feedback.text = &quot;Correct!&quot;;&amp;#10;                }&amp;#10;                score += 1;&amp;#10;            } else {&amp;#10;                correct = 0;&amp;#10;                if (is_practice) {&amp;#10;                    trial_feedback.text = &quot;Let's think again&quot;;&amp;#10;                }&amp;#10;            }&amp;#10;        }&amp;#10;        moving_card = null;&amp;#10;    }&amp;#10;}&amp;#10;if (SHOW_DEBUG) {&amp;#10;    trial_text.text = `&amp;#10;tryNum = ${tryNum}&amp;#10;trialNum = ${trialNum} (out of ${maxScore})&amp;#10;score = ${score} (out of ${maxScore})&amp;#10;globalClock = ${round(globalClock.getTime(), 3)}&amp;#10;t = ${round(t, 3)}`&amp;#10;;&amp;#10;    if ((moving_card !== null)) {&amp;#10;        trial_text.text += `&amp;#10;moving_card.name = ${moving_card.name}&amp;#10;pos = (${round(x, 3)}, ${round(y, 3)})`&amp;#10;;&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="box1.autoDraw = false;&amp;#10;box2.autoDraw = false;&amp;#10;if ((trialNum === maxScore)) {&amp;#10;    scores.push(score);&amp;#10;    score = 0;&amp;#10;}&amp;#10;trial_feedback.text = &quot;&quot;;&amp;#10;psychoJS.experiment.addData(&quot;choice&quot;, choice);&amp;#10;psychoJS.experiment.addData(&quot;correct&quot;, correct);&amp;#10;psychoJS.experiment.addData(&quot;trial_time&quot;, trial_time);&amp;#10;psychoJS.experiment.addData(&quot;cumulative_time&quot;, cumulative_time);&amp;#10;psychoJS.experiment.addData(&quot;coords_x&quot;, coords_x);&amp;#10;psychoJS.experiment.addData(&quot;coords_y&quot;, coords_y);&amp;#10;psychoJS.experiment.addData(&quot;coords_t&quot;, coords_t);&amp;#10;psychoJS.experiment.addData(&quot;end_timestamp&quot;, util.MonotonicClock.getDateStr());&amp;#10;psychoJS.experiment.addData(&quot;total_seconds&quot;, globalClock.getTime());&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="&amp;#10;box1.autoDraw = False&amp;#10;box2.autoDraw = False&amp;#10;&amp;#10;if trialNum == maxScore:&amp;#10;    scores.append(score)&amp;#10;    score = 0  # Reset&amp;#10;&amp;#10;trial_feedback.text = &quot;&quot;&amp;#10;&amp;#10;thisExp.addData(&quot;choice&quot;, choice)&amp;#10;thisExp.addData(&quot;correct&quot;, correct)&amp;#10;thisExp.addData(&quot;trial_time&quot;, trial_time)&amp;#10;thisExp.addData(&quot;cumulative_time&quot;, cumulative_time)&amp;#10;&amp;#10;# Position tracking (for Nixi)&amp;#10;thisExp.addData(&quot;coords_x&quot;, coords_x)&amp;#10;thisExp.addData(&quot;coords_y&quot;, coords_y)&amp;#10;thisExp.addData(&quot;coords_t&quot;, coords_t)&amp;#10;&amp;#10;# Record timestamp and total time&amp;#10;thisExp.addData(&quot;end_timestamp&quot;, util.MonotonicClock.getDateStr())&amp;#10;thisExp.addData(&quot;total_seconds&quot;, globalClock.getTime())&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="trial_code" valType="code"/>
      </CodeComponent>
      <TextComponent name="trial_header">
        <Param name="color" updates="constant" val="black" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="num"/>
        <Param name="name" updates="None" val="trial_header" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0.4)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every repeat" val="$blockName" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
      <TextComponent name="trial_feedback">
        <Param name="color" updates="constant" val="black" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.1" valType="num"/>
        <Param name="name" updates="None" val="trial_feedback" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, -0.05)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
      <TextComponent name="trial_text">
        <Param name="color" updates="constant" val="black" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.02" valType="num"/>
        <Param name="name" updates="None" val="trial_text" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0.6, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
    </Routine>
    <Routine name="gate">
      <CodeComponent name="gate_code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="psychoJS.experiment.addData(&quot;expVersion&quot;, expVersion);&amp;#10;is_practice = (tryNum !== &quot;NA&quot;);&amp;#10;is_first_practice = (tryNum === 1);&amp;#10;skip_practice = false;&amp;#10;if (((is_practice &amp;&amp; (! is_first_practice)) &amp;&amp; (scores.slice((- 1))[0] &gt;= 4))) {&amp;#10;    skip_practice = true;&amp;#10;}&amp;#10;if ((((Number.parseInt(trialNum) !== 1) || (! is_first_practice)) || skip_practice)) {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;if (USE_AUDIO) {&amp;#10;    if ((ruleNum !== 3)) {&amp;#10;        aud_files = [`${AUD_DIR}/rule-${ruleNum}-teaching.m4a`];&amp;#10;    } else {&amp;#10;        aud_files = [];&amp;#10;        for (var i, _pj_c = 0, _pj_a = util.range(1, 4), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;            i = _pj_a[_pj_c];&amp;#10;            aud_files.push(`${AUD_DIR}/rule-3-teaching-part-${i}.m4a`);&amp;#10;        }&amp;#10;    }&amp;#10;    aud_idx = 0;&amp;#10;    SOUND = make_sound(&quot;teaching&quot;, aud_files[aud_idx]);&amp;#10;    SOUND_DUR = SOUND.getDuration();&amp;#10;    SOUND_T = 0;&amp;#10;    SOUND.play();&amp;#10;}&amp;#10;gate_header.text = HEADERS[ruleNum];&amp;#10;[boxes, objs, times, xy0s, dxdys] = all_anims[ruleNum]();&amp;#10;for (var box, _pj_c = 0, _pj_a = boxes, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    box = _pj_a[_pj_c];&amp;#10;    box.autoDraw = true;&amp;#10;}&amp;#10;hide_next = true;&amp;#10;hide_objs = [];&amp;#10;for (var i, _pj_c = 0, _pj_a = util.range(objs.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    hide_objs.push(true);&amp;#10;}&amp;#10;if (SHOW_DEBUG) {&amp;#10;    SKIP.autoDraw = true;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="&amp;#10;thisExp.addData(&quot;expVersion&quot;, expVersion)&amp;#10;&amp;#10;is_practice = tryNum != &quot;NA&quot;&amp;#10;is_first_practice = tryNum == 1&amp;#10;&amp;#10;skip_practice = False&amp;#10;if is_practice and not is_first_practice and scores[-1] &gt;= 4:&amp;#10;    skip_practice = True&amp;#10;&amp;#10;if int(trialNum) != 1 or not is_first_practice or skip_practice:&amp;#10;    continueRoutine = False&amp;#10;&amp;#10;if USE_AUDIO:&amp;#10;    if ruleNum != 3:&amp;#10;        aud_files = [f&quot;{AUD_DIR}/rule-{ruleNum}-teaching.m4a&quot;]&amp;#10;    else:&amp;#10;        aud_files = []&amp;#10;        for i in range(1, 4):&amp;#10;            aud_files.append(f&quot;{AUD_DIR}/rule-3-teaching-part-{i}.m4a&quot;)&amp;#10;    aud_idx = 0&amp;#10;    SOUND = make_sound(&quot;teaching&quot;, aud_files[aud_idx])&amp;#10;    SOUND_DUR = SOUND.getDuration()&amp;#10;    SOUND_T = 0&amp;#10;    SOUND.play()&amp;#10;&amp;#10;gate_header.text = HEADERS[ruleNum]&amp;#10;&amp;#10;boxes, objs, times, xy0s, dxdys = all_anims[ruleNum]()&amp;#10;&amp;#10;for box in boxes:&amp;#10;    box.autoDraw = True&amp;#10;&amp;#10;hide_next = True&amp;#10;&amp;#10;hide_objs = []&amp;#10;for i in range(len(objs)):&amp;#10;    hide_objs.append(True)&amp;#10;&amp;#10;if SHOW_DEBUG:&amp;#10;    SKIP.autoDraw = True&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="&amp;#10;if ruleNum == 3:&amp;#10;    if t - SOUND_T &gt; SOUND_DUR:&amp;#10;        if aud_idx &lt; 2:&amp;#10;            aud_idx += 1&amp;#10;            SOUND = make_sound(&quot;teaching&quot;, aud_files[aud_idx])&amp;#10;            SOUND_DUR = SOUND.getDuration()&amp;#10;            SOUND_T = t&amp;#10;            SOUND.play()&amp;#10;        else:&amp;#10;            hide_next = False&amp;#10;            NEXT.autoDraw = True&amp;#10;else:&amp;#10;    if hide_next and t - SOUND_T &gt; SOUND_DUR:&amp;#10;        hide_next = False&amp;#10;        NEXT.autoDraw = True&amp;#10;&amp;#10;for i in range(len(objs)):&amp;#10;    if hide_objs[i] and t &gt; times[i][0] and t &lt;= times[i][2]:&amp;#10;        hide_objs[i] = False&amp;#10;        objs[i].pos = xy0s[i]&amp;#10;        objs[i].autoDraw = True&amp;#10;    if not hide_objs[i] and t &gt; times[i][2]:&amp;#10;        hide_objs[i] = True&amp;#10;        objs[i].autoDraw = False&amp;#10;    if t &gt; times[i][1] and t &lt;= times[i][2]:&amp;#10;        objs[i].pos = get_xy(t, times[i][1], xy0s[i], dxdys[i])&amp;#10;&amp;#10;MOUSE_L = MOUSE.getPressed()[0]&amp;#10;if MOUSE_L_prev != MOUSE_L:&amp;#10;    MOUSE_L_prev = MOUSE_L&amp;#10;    if MOUSE_L:&amp;#10;        if t - SOUND_T &gt; SOUND_DUR and NEXT.contains(MOUSE):&amp;#10;            if ruleNum != 3:&amp;#10;                continueRoutine = False&amp;#10;            elif aud_idx &gt;= 2:&amp;#10;                continueRoutine = False&amp;#10;        elif SHOW_DEBUG and SKIP.contains(MOUSE):&amp;#10;            continueRoutine = False&amp;#10;&amp;#10;if SHOW_DEBUG:&amp;#10;    gate_text.text = f&quot;&quot;&quot;&amp;#10;aud_files[{aud_idx}] = {aud_files[aud_idx]}&amp;#10;SOUND_DUR = {round(SOUND_DUR, 3)}&amp;#10;t = {round(t, 3)}&amp;#10;&quot;&quot;&quot;&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="if ((ruleNum === 3)) {&amp;#10;    if (((t - SOUND_T) &gt; SOUND_DUR)) {&amp;#10;        if ((aud_idx &lt; 2)) {&amp;#10;            aud_idx += 1;&amp;#10;            SOUND = make_sound(&quot;teaching&quot;, aud_files[aud_idx]);&amp;#10;            SOUND_DUR = SOUND.getDuration();&amp;#10;            SOUND_T = t;&amp;#10;            SOUND.play();&amp;#10;        } else {&amp;#10;            hide_next = false;&amp;#10;            NEXT.autoDraw = true;&amp;#10;        }&amp;#10;    }&amp;#10;} else {&amp;#10;    if ((hide_next &amp;&amp; ((t - SOUND_T) &gt; SOUND_DUR))) {&amp;#10;        hide_next = false;&amp;#10;        NEXT.autoDraw = true;&amp;#10;    }&amp;#10;}&amp;#10;for (var i, _pj_c = 0, _pj_a = util.range(objs.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    if (((hide_objs[i] &amp;&amp; (t &gt; times[i][0])) &amp;&amp; (t &lt;= times[i][2]))) {&amp;#10;        hide_objs[i] = false;&amp;#10;        objs[i].pos = xy0s[i];&amp;#10;        objs[i].autoDraw = true;&amp;#10;    }&amp;#10;    if (((! hide_objs[i]) &amp;&amp; (t &gt; times[i][2]))) {&amp;#10;        hide_objs[i] = true;&amp;#10;        objs[i].autoDraw = false;&amp;#10;    }&amp;#10;    if (((t &gt; times[i][1]) &amp;&amp; (t &lt;= times[i][2]))) {&amp;#10;        objs[i].pos = get_xy(t, times[i][1], xy0s[i], dxdys[i]);&amp;#10;    }&amp;#10;}&amp;#10;MOUSE_L = MOUSE.getPressed()[0];&amp;#10;if ((MOUSE_L_prev !== MOUSE_L)) {&amp;#10;    MOUSE_L_prev = MOUSE_L;&amp;#10;    if (MOUSE_L) {&amp;#10;        if ((((t - SOUND_T) &gt; SOUND_DUR) &amp;&amp; NEXT.contains(MOUSE))) {&amp;#10;            if ((ruleNum !== 3)) {&amp;#10;                continueRoutine = false;&amp;#10;            } else {&amp;#10;                if ((aud_idx &gt;= 2)) {&amp;#10;                    continueRoutine = false;&amp;#10;                }&amp;#10;            }&amp;#10;        } else {&amp;#10;            if ((SHOW_DEBUG &amp;&amp; SKIP.contains(MOUSE))) {&amp;#10;                continueRoutine = false;&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;if (SHOW_DEBUG) {&amp;#10;    gate_text.text = `&amp;#10;aud_files[${aud_idx}] = ${aud_files[aud_idx]}&amp;#10;SOUND_DUR = ${round(SOUND_DUR, 3)}&amp;#10;t = ${round(t, 3)}`&amp;#10;;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="gate_header.text = &quot;&quot;;&amp;#10;for (var box, _pj_c = 0, _pj_a = boxes, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    box = _pj_a[_pj_c];&amp;#10;    box.autoDraw = false;&amp;#10;}&amp;#10;for (var i, _pj_c = 0, _pj_a = util.range(objs.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    i = _pj_a[_pj_c];&amp;#10;    objs[i].pos = CARD_POS0;&amp;#10;    objs[i].autoDraw = false;&amp;#10;}&amp;#10;NEXT.autoDraw = false;&amp;#10;if (USE_AUDIO) {&amp;#10;    SOUND.stop();&amp;#10;}&amp;#10;if (SHOW_DEBUG) {&amp;#10;    SKIP.autoDraw = false;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="&amp;#10;gate_header.text = &quot;&quot;&amp;#10;&amp;#10;for box in boxes:&amp;#10;    box.autoDraw = False&amp;#10;&amp;#10;for i in range(len(objs)):&amp;#10;    objs[i].pos = CARD_POS0&amp;#10;    objs[i].autoDraw = False&amp;#10;&amp;#10;NEXT.autoDraw = False&amp;#10;&amp;#10;if USE_AUDIO:&amp;#10;    SOUND.stop()&amp;#10;&amp;#10;if SHOW_DEBUG:&amp;#10;    SKIP.autoDraw = False&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="gate_code" valType="code"/>
      </CodeComponent>
      <CodeComponent name="gate_anim">
        <Param name="Before Experiment" updates="constant" val="&amp;#10;def anim_r1():&amp;#10;    boxes = [OBJS[&quot;long-red-crayon-box&quot;],&amp;#10;             OBJS[&quot;short-red-crayon-box&quot;]]&amp;#10;    objs = [OBJS[&quot;long-red-crayon&quot;],&amp;#10;            OBJS[&quot;short-red-crayon&quot;]]&amp;#10;    dests = [boxes[0], boxes[1]]&amp;#10;    times = [[0, 10.5, 12.5], [15.4, 17.5, 20.5]]&amp;#10;    xy0s = []&amp;#10;    xy1s = []&amp;#10;    dxdys = []&amp;#10;    for i in range(len(objs)):&amp;#10;        xy0s.append(objs[i].pos)&amp;#10;        xy1s.append(dests[i].pos)&amp;#10;        dxdys.append(get_dxdy(xy0s[i], xy1s[i], times[i][1], times[i][2]))&amp;#10;    return boxes, objs, times, xy0s, dxdys&amp;#10;&amp;#10;def anim_r2():&amp;#10;    boxes = [OBJS[&quot;long-red-crayon-box&quot;],&amp;#10;             OBJS[&quot;short-red-crayon-box&quot;]]&amp;#10;    objs = [OBJS[&quot;long-red-crayon&quot;],&amp;#10;            OBJS[&quot;short-red-crayon&quot;]]&amp;#10;    dests = [boxes[1], boxes[0]]&amp;#10;    times = [[5, 7, 10], [12.5, 14.5, 17.5]]&amp;#10;    xy0s = []&amp;#10;    xy1s = []&amp;#10;    dxdys = []&amp;#10;    for i in range(len(objs)):&amp;#10;        xy0s.append(objs[i].pos)&amp;#10;        xy1s.append(dests[i].pos)&amp;#10;        dxdys.append(get_dxdy(xy0s[i], xy1s[i], times[i][1], times[i][2]))&amp;#10;    return boxes, objs, times, xy0s, dxdys&amp;#10;&amp;#10;def anim_r3():&amp;#10;    boxes = [OBJS[&quot;long-outline-crayon-box&quot;],&amp;#10;             OBJS[&quot;short-outline-crayon-box&quot;]]&amp;#10;    objs = [OBJS[&quot;long-red-crayon&quot;],&amp;#10;            OBJS[&quot;short-red-crayon&quot;],&amp;#10;            OBJS[&quot;long-yellow-crayon&quot;],&amp;#10;            OBJS[&quot;short-yellow-crayon&quot;],&amp;#10;            OBJS[&quot;long-red-crayon&quot;],&amp;#10;            OBJS[&quot;short-red-crayon&quot;],&amp;#10;            OBJS[&quot;long-yellow-crayon&quot;],&amp;#10;            OBJS[&quot;short-yellow-crayon&quot;]]&amp;#10;    xy0s = [(-0.25, -0.25),&amp;#10;            (0.25, -0.25),&amp;#10;            (-0.25, -0.25),&amp;#10;            (0.25, -0.25),&amp;#10;            CARD_POS0, CARD_POS0, CARD_POS0, CARD_POS0]&amp;#10;    xy1s = [xy0s[0],&amp;#10;            xy0s[1],&amp;#10;            xy0s[2],&amp;#10;            xy0s[3],&amp;#10;            boxes[0].pos,&amp;#10;            boxes[1].pos,&amp;#10;            boxes[1].pos,&amp;#10;            boxes[0].pos]&amp;#10;    times = [[5.5, 11, 11],&amp;#10;             [5.5, 11, 11],&amp;#10;             [12, 18, 18],&amp;#10;             [12, 18, 18],&amp;#10;             [21, 24, 26],&amp;#10;             [29, 31, 33.5],&amp;#10;             [37, 39, 42],&amp;#10;             [45, 47, 50]]&amp;#10;    dxdys = []&amp;#10;    for i in range(len(objs)):&amp;#10;        dxdys.append(get_dxdy(xy0s[i], xy1s[i], times[i][1], times[i][2]))&amp;#10;    return boxes, objs, times, xy0s, dxdys&amp;#10;&amp;#10;def get_dxdy(xy0, xy1, t0, t1):&amp;#10;    x0, y0 = xy0&amp;#10;    x1, y1 = xy1&amp;#10;    dt = t1 - t0&amp;#10;    dx = (x1 - x0) / dt&amp;#10;    dy = (y1 - y0) / dt&amp;#10;    return dx, dy&amp;#10;&amp;#10;def get_xy(t, t0, xy0, dxdy):&amp;#10;    x0, y0 = xy0&amp;#10;    dx, dy = dxdy&amp;#10;    dt = t - t0&amp;#10;    x = x0 + dx * dt&amp;#10;    y = y0 + dy * dt&amp;#10;    return x, y&amp;#10;" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="function anim_r1() {&amp;#10;    var boxes, dests, dxdys, objs, times, xy0s, xy1s;&amp;#10;    boxes = [OBJS[&quot;long-red-crayon-box&quot;], OBJS[&quot;short-red-crayon-box&quot;]];&amp;#10;    objs = [OBJS[&quot;long-red-crayon&quot;], OBJS[&quot;short-red-crayon&quot;]];&amp;#10;    dests = [boxes[0], boxes[1]];&amp;#10;    times = [[0, 10.5, 12.5], [15.4, 17.5, 20.5]];&amp;#10;    xy0s = [];&amp;#10;    xy1s = [];&amp;#10;    dxdys = [];&amp;#10;    for (var i, _pj_c = 0, _pj_a = util.range(objs.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        i = _pj_a[_pj_c];&amp;#10;        xy0s.push(objs[i].pos);&amp;#10;        xy1s.push(dests[i].pos);&amp;#10;        dxdys.push(get_dxdy(xy0s[i], xy1s[i], times[i][1], times[i][2]));&amp;#10;    }&amp;#10;    return [boxes, objs, times, xy0s, dxdys];&amp;#10;}&amp;#10;function anim_r2() {&amp;#10;    var boxes, dests, dxdys, objs, times, xy0s, xy1s;&amp;#10;    boxes = [OBJS[&quot;long-red-crayon-box&quot;], OBJS[&quot;short-red-crayon-box&quot;]];&amp;#10;    objs = [OBJS[&quot;long-red-crayon&quot;], OBJS[&quot;short-red-crayon&quot;]];&amp;#10;    dests = [boxes[1], boxes[0]];&amp;#10;    times = [[5, 7, 10], [12.5, 14.5, 17.5]];&amp;#10;    xy0s = [];&amp;#10;    xy1s = [];&amp;#10;    dxdys = [];&amp;#10;    for (var i, _pj_c = 0, _pj_a = util.range(objs.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        i = _pj_a[_pj_c];&amp;#10;        xy0s.push(objs[i].pos);&amp;#10;        xy1s.push(dests[i].pos);&amp;#10;        dxdys.push(get_dxdy(xy0s[i], xy1s[i], times[i][1], times[i][2]));&amp;#10;    }&amp;#10;    return [boxes, objs, times, xy0s, dxdys];&amp;#10;}&amp;#10;function anim_r3() {&amp;#10;    var boxes, dxdys, objs, times, xy0s, xy1s;&amp;#10;    boxes = [OBJS[&quot;long-outline-crayon-box&quot;], OBJS[&quot;short-outline-crayon-box&quot;]];&amp;#10;    objs = [OBJS[&quot;long-red-crayon&quot;], OBJS[&quot;short-red-crayon&quot;], OBJS[&quot;long-yellow-crayon&quot;], OBJS[&quot;short-yellow-crayon&quot;], OBJS[&quot;long-red-crayon&quot;], OBJS[&quot;short-red-crayon&quot;], OBJS[&quot;long-yellow-crayon&quot;], OBJS[&quot;short-yellow-crayon&quot;]];&amp;#10;    xy0s = [[(- 0.25), (- 0.25)], [0.25, (- 0.25)], [(- 0.25), (- 0.25)], [0.25, (- 0.25)], CARD_POS0, CARD_POS0, CARD_POS0, CARD_POS0];&amp;#10;    xy1s = [xy0s[0], xy0s[1], xy0s[2], xy0s[3], boxes[0].pos, boxes[1].pos, boxes[1].pos, boxes[0].pos];&amp;#10;    times = [[5.5, 11, 11], [5.5, 11, 11], [12, 18, 18], [12, 18, 18], [21, 24, 26], [29, 31, 33.5], [37, 39, 42], [45, 47, 50]];&amp;#10;    dxdys = [];&amp;#10;    for (var i, _pj_c = 0, _pj_a = util.range(objs.length), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        i = _pj_a[_pj_c];&amp;#10;        dxdys.push(get_dxdy(xy0s[i], xy1s[i], times[i][1], times[i][2]));&amp;#10;    }&amp;#10;    return [boxes, objs, times, xy0s, dxdys];&amp;#10;}&amp;#10;function get_dxdy(xy0, xy1, t0, t1) {&amp;#10;    var dt, dx, dy, x0, x1, y0, y1;&amp;#10;    [x0, y0] = xy0;&amp;#10;    [x1, y1] = xy1;&amp;#10;    dt = (t1 - t0);&amp;#10;    dx = ((x1 - x0) / dt);&amp;#10;    dy = ((y1 - y0) / dt);&amp;#10;    return [dx, dy];&amp;#10;}&amp;#10;function get_xy(t, t0, xy0, dxdy) {&amp;#10;    var dt, dx, dy, x, x0, y, y0;&amp;#10;    [x0, y0] = xy0;&amp;#10;    [dx, dy] = dxdy;&amp;#10;    dt = (t - t0);&amp;#10;    x = (x0 + (dx * dt));&amp;#10;    y = (y0 + (dy * dt));&amp;#10;    return [x, y];&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="&amp;#10;all_anims = [None]&amp;#10;all_anims.append(anim_r1)&amp;#10;all_anims.append(anim_r2)&amp;#10;all_anims.append(anim_r3)&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="all_anims = [null];&amp;#10;all_anims.push(anim_r1);&amp;#10;all_anims.push(anim_r2);&amp;#10;all_anims.push(anim_r3);&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="gate_anim" valType="code"/>
      </CodeComponent>
      <TextComponent name="gate_header">
        <Param name="color" updates="constant" val="black" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="num"/>
        <Param name="name" updates="None" val="gate_header" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0, 0.4)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
      <TextComponent name="gate_text">
        <Param name="color" updates="constant" val="black" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.02" valType="num"/>
        <Param name="name" updates="None" val="gate_text" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0.6, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
    </Routine>
    <Routine name="begin">
      <CodeComponent name="begin_code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="&amp;#10;expVersion = &quot;2022.09.25&quot;&amp;#10;AUD_DIR = &quot;resources/aud&quot;&amp;#10;IMGS_DIR = &quot;resources/imgs&quot;&amp;#10;OBJS_DIR = f&quot;{IMGS_DIR}/crayons&quot;&amp;#10;SLIDES_DIR = f&quot;{IMGS_DIR}/slides&quot;&amp;#10;SEQ_FILE = &quot;resources/seqs/crayons-2yo.csv&quot;&amp;#10;&amp;#10;SHOW_DEBUG = expInfo[&quot;Debug&quot;] == &quot;Yes&quot;&amp;#10;USE_AUDIO = expInfo[&quot;Audio&quot;] == &quot;Yes&quot;&amp;#10;&amp;#10;# So the cards do not immediately move (100 ms)&amp;#10;PICTURE_DELAY = 0.1&amp;#10;&amp;#10;# Mouse tracking threshold squared distance&amp;#10;MIN_DIST_SQ = 0.005 * 0.005&amp;#10;&amp;#10;# Slides: 1001 x 563&amp;#10;SLIDE_W = 1.0&amp;#10;SLIDE_SIZE = (SLIDE_W, SLIDE_W / 1001 * 563)&amp;#10;&amp;#10;# Objects: 600 x 360&amp;#10;BOX_W = 0.6&amp;#10;BOX_SIZE = (BOX_W, BOX_W / 600 * 360)&amp;#10;CARD_W = 0.45&amp;#10;CARD_SIZE = (CARD_W, CARD_W / 600 * 360)&amp;#10;&amp;#10;BOX1_POS = (-0.4, 0.15)&amp;#10;BOX2_POS = (0.4, 0.15)&amp;#10;CARD_POS0 = (0, -0.3)&amp;#10;&amp;#10;# &quot;Next&quot; button&amp;#10;NEXT_POS = (0, -0.39)&amp;#10;#NEXT_SIZE = (0.26, 0.1)&amp;#10;#NEXT = make_button(&quot;continue&quot;, &quot;Continue&quot;, NEXT_POS, NEXT_SIZE)&amp;#10;NEXT_SIZE = (0.1 / 104 * 254, 0.1)  # 254 x 104&amp;#10;NEXT = make_img(&quot;continue&quot;, f&quot;{IMGS_DIR}/continue.png&quot;, NEXT_POS, NEXT_SIZE)&amp;#10;&amp;#10;SKIP = make_button(&quot;skip&quot;, &quot;Skip&quot;, (0.6, -0.3), (0.21, 0.1))&amp;#10;&amp;#10;# Global mouse&amp;#10;MOUSE = core.Mouse(win=win)&amp;#10;MOUSE_L = 0&amp;#10;MOUSE_L_prev = 0&amp;#10;&amp;#10;# Global sound&amp;#10;SOUND = None&amp;#10;&amp;#10;OBJS = {}&amp;#10;OBJS[&quot;long-red-crayon-box&quot;] = make_img(&quot;long-red-crayon-box&quot;, f&quot;{OBJS_DIR}/boxlongred_whbg.png&quot;, BOX1_POS, BOX_SIZE)&amp;#10;OBJS[&quot;short-red-crayon-box&quot;] = make_img(&quot;short-red-crayon-box&quot;, f&quot;{OBJS_DIR}/boxshortred_whbg.png&quot;, BOX2_POS, BOX_SIZE)&amp;#10;OBJS[&quot;long-outline-crayon-box&quot;] = make_img(&quot;long-outline-crayon-box&quot;, f&quot;{OBJS_DIR}/boxlongoutline_whbg.png&quot;, BOX1_POS, BOX_SIZE)&amp;#10;OBJS[&quot;short-outline-crayon-box&quot;] = make_img(&quot;short-outline-crayon-box&quot;, f&quot;{OBJS_DIR}/boxshortoutline_whbg.png&quot;, BOX2_POS, BOX_SIZE)&amp;#10;OBJS[&quot;long-red-crayon&quot;] = make_img(&quot;long-red-crayon&quot;, f&quot;{OBJS_DIR}/longred_whbg_transp.png&quot;, CARD_POS0, CARD_SIZE)&amp;#10;OBJS[&quot;short-red-crayon&quot;] = make_img(&quot;short-red-crayon&quot;, f&quot;{OBJS_DIR}/shortred_whbg_transp.png&quot;, CARD_POS0, CARD_SIZE)&amp;#10;OBJS[&quot;long-yellow-crayon&quot;] = make_img(&quot;long-yellow-crayon&quot;, f&quot;{OBJS_DIR}/longyellow_whbg_transp.png&quot;, CARD_POS0, CARD_SIZE)&amp;#10;OBJS[&quot;short-yellow-crayon&quot;] = make_img(&quot;short-yellow-crayon&quot;, f&quot;{OBJS_DIR}/shortyellow_whbg_transp.png&quot;, CARD_POS0, CARD_SIZE)&amp;#10;&amp;#10;HEADERS = [&amp;#10;    None,&amp;#10;    &quot;Rule 1 Teaching&quot;,&amp;#10;    &quot;Rule 2 Teaching&quot;,&amp;#10;    &quot;Rule 3 Teaching&quot;,&amp;#10;]&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="expVersion = &quot;2022.09.25&quot;;&amp;#10;AUD_DIR = &quot;resources/aud&quot;;&amp;#10;IMGS_DIR = &quot;resources/imgs&quot;;&amp;#10;OBJS_DIR = `${IMGS_DIR}/crayons`;&amp;#10;SLIDES_DIR = `${IMGS_DIR}/slides`;&amp;#10;SEQ_FILE = &quot;resources/seqs/crayons-2yo.csv&quot;;&amp;#10;SHOW_DEBUG = (expInfo[&quot;Debug&quot;] === &quot;Yes&quot;);&amp;#10;USE_AUDIO = (expInfo[&quot;Audio&quot;] === &quot;Yes&quot;);&amp;#10;PICTURE_DELAY = 0.1;&amp;#10;MIN_DIST_SQ = (0.005 * 0.005);&amp;#10;SLIDE_W = 1.0;&amp;#10;SLIDE_SIZE = [SLIDE_W, ((SLIDE_W / 1001) * 563)];&amp;#10;BOX_W = 0.6;&amp;#10;BOX_SIZE = [BOX_W, ((BOX_W / 600) * 360)];&amp;#10;CARD_W = 0.45;&amp;#10;CARD_SIZE = [CARD_W, ((CARD_W / 600) * 360)];&amp;#10;BOX1_POS = [(- 0.4), 0.15];&amp;#10;BOX2_POS = [0.4, 0.15];&amp;#10;CARD_POS0 = [0, (- 0.3)];&amp;#10;NEXT_POS = [0, (- 0.39)];&amp;#10;NEXT_SIZE = [((0.1 / 104) * 254), 0.1];&amp;#10;NEXT = make_img(&quot;continue&quot;, `${IMGS_DIR}/continue.png`, NEXT_POS, NEXT_SIZE);&amp;#10;SKIP = make_button(&quot;skip&quot;, &quot;Skip&quot;, [0.6, (- 0.3)], [0.21, 0.1]);&amp;#10;MOUSE = new core.Mouse({&quot;win&quot;: psychoJS.window});&amp;#10;MOUSE_L = 0;&amp;#10;MOUSE_L_prev = 0;&amp;#10;SOUND = null;&amp;#10;OBJS = {};&amp;#10;OBJS[&quot;long-red-crayon-box&quot;] = make_img(&quot;long-red-crayon-box&quot;, `${OBJS_DIR}/boxlongred_whbg.png`, BOX1_POS, BOX_SIZE);&amp;#10;OBJS[&quot;short-red-crayon-box&quot;] = make_img(&quot;short-red-crayon-box&quot;, `${OBJS_DIR}/boxshortred_whbg.png`, BOX2_POS, BOX_SIZE);&amp;#10;OBJS[&quot;long-outline-crayon-box&quot;] = make_img(&quot;long-outline-crayon-box&quot;, `${OBJS_DIR}/boxlongoutline_whbg.png`, BOX1_POS, BOX_SIZE);&amp;#10;OBJS[&quot;short-outline-crayon-box&quot;] = make_img(&quot;short-outline-crayon-box&quot;, `${OBJS_DIR}/boxshortoutline_whbg.png`, BOX2_POS, BOX_SIZE);&amp;#10;OBJS[&quot;long-red-crayon&quot;] = make_img(&quot;long-red-crayon&quot;, `${OBJS_DIR}/longred_whbg_transp.png`, CARD_POS0, CARD_SIZE);&amp;#10;OBJS[&quot;short-red-crayon&quot;] = make_img(&quot;short-red-crayon&quot;, `${OBJS_DIR}/shortred_whbg_transp.png`, CARD_POS0, CARD_SIZE);&amp;#10;OBJS[&quot;long-yellow-crayon&quot;] = make_img(&quot;long-yellow-crayon&quot;, `${OBJS_DIR}/longyellow_whbg_transp.png`, CARD_POS0, CARD_SIZE);&amp;#10;OBJS[&quot;short-yellow-crayon&quot;] = make_img(&quot;short-yellow-crayon&quot;, `${OBJS_DIR}/shortyellow_whbg_transp.png`, CARD_POS0, CARD_SIZE);&amp;#10;HEADERS = [null, &quot;Rule 1 Teaching&quot;, &quot;Rule 2 Teaching&quot;, &quot;Rule 3 Teaching&quot;];&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if (USE_AUDIO) {&amp;#10;    aud_file = `${AUD_DIR}/task-introduction.m4a`;&amp;#10;    SOUND = make_sound(&quot;intro&quot;, aud_file);&amp;#10;    SOUND_DUR = SOUND.getDuration();&amp;#10;    SOUND_T = 0;&amp;#10;    SOUND.play();&amp;#10;}&amp;#10;OBJS[&quot;long-red-crayon&quot;].pos = [0, 0];&amp;#10;OBJS[&quot;long-red-crayon&quot;].autoDraw = true;&amp;#10;if (SHOW_DEBUG) {&amp;#10;    SKIP.autoDraw = true;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="&amp;#10;if USE_AUDIO:&amp;#10;    aud_file = f&quot;{AUD_DIR}/task-introduction.m4a&quot;&amp;#10;    SOUND = make_sound(&quot;intro&quot;, aud_file)&amp;#10;    SOUND_DUR = SOUND.getDuration()&amp;#10;    SOUND_T = 0&amp;#10;    SOUND.play()&amp;#10;&amp;#10;OBJS[&quot;long-red-crayon&quot;].pos = (0, 0)&amp;#10;OBJS[&quot;long-red-crayon&quot;].autoDraw = True&amp;#10;&amp;#10;if SHOW_DEBUG:&amp;#10;    SKIP.autoDraw = True&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="&amp;#10;if t &gt; SOUND_DUR:&amp;#10;    continueRoutine = False&amp;#10;elif t &gt; 8.8:&amp;#10;    OBJS[&quot;long-red-crayon&quot;].autoDraw = False&amp;#10;    OBJS[&quot;short-red-crayon&quot;].pos = (0, 0)&amp;#10;    OBJS[&quot;short-red-crayon&quot;].autoDraw = True&amp;#10;&amp;#10;if SHOW_DEBUG:&amp;#10;    begin_text.text = f&quot;&quot;&quot;&amp;#10;aud_file = {aud_file}&amp;#10;SOUND_DUR = {round(SOUND_DUR, 3)}&amp;#10;t = {round(t, 3)}&amp;#10;&quot;&quot;&quot;&amp;#10;    MOUSE_L = MOUSE.getPressed()[0]&amp;#10;    if MOUSE_L_prev != MOUSE_L:&amp;#10;        MOUSE_L_prev = MOUSE_L&amp;#10;        if MOUSE_L and SKIP.contains(MOUSE):&amp;#10;            continueRoutine = False&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="if ((t &gt; SOUND_DUR)) {&amp;#10;    continueRoutine = false;&amp;#10;} else {&amp;#10;    if ((t &gt; 8.8)) {&amp;#10;        OBJS[&quot;long-red-crayon&quot;].autoDraw = false;&amp;#10;        OBJS[&quot;short-red-crayon&quot;].pos = [0, 0];&amp;#10;        OBJS[&quot;short-red-crayon&quot;].autoDraw = true;&amp;#10;    }&amp;#10;}&amp;#10;if (SHOW_DEBUG) {&amp;#10;    begin_text.text = `&amp;#10;aud_file = ${aud_file}&amp;#10;SOUND_DUR = ${round(SOUND_DUR, 3)}&amp;#10;t = ${round(t, 3)}`&amp;#10;;&amp;#10;    MOUSE_L = MOUSE.getPressed()[0];&amp;#10;    if ((MOUSE_L_prev !== MOUSE_L)) {&amp;#10;        MOUSE_L_prev = MOUSE_L;&amp;#10;        if ((MOUSE_L &amp;&amp; SKIP.contains(MOUSE))) {&amp;#10;            continueRoutine = false;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="OBJS[&quot;long-red-crayon&quot;].autoDraw = false;&amp;#10;OBJS[&quot;long-red-crayon&quot;].pos = CARD_POS0;&amp;#10;OBJS[&quot;short-red-crayon&quot;].autoDraw = false;&amp;#10;OBJS[&quot;short-red-crayon&quot;].pos = CARD_POS0;&amp;#10;if (USE_AUDIO) {&amp;#10;    SOUND.stop();&amp;#10;}&amp;#10;if (SHOW_DEBUG) {&amp;#10;    SKIP.autoDraw = false;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="&amp;#10;OBJS[&quot;long-red-crayon&quot;].autoDraw = False&amp;#10;OBJS[&quot;long-red-crayon&quot;].pos = CARD_POS0&amp;#10;OBJS[&quot;short-red-crayon&quot;].autoDraw = False&amp;#10;OBJS[&quot;short-red-crayon&quot;].pos = CARD_POS0&amp;#10;&amp;#10;if USE_AUDIO:&amp;#10;    SOUND.stop()&amp;#10;&amp;#10;if SHOW_DEBUG:&amp;#10;    SKIP.autoDraw = False&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="begin_code" valType="code"/>
      </CodeComponent>
      <CodeComponent name="functions_g">
        <Param name="Before Experiment" updates="constant" val="&amp;#10;def make_button(name, text, pos, size):&amp;#10;    return visual.ButtonStim(&amp;#10;        win=win, &amp;#10;        text=text,&amp;#10;    #    font=&quot;Arvo&quot;,&amp;#10;        pos=pos,&amp;#10;        letterHeight=0.05,&amp;#10;        size=size,&amp;#10;        borderWidth=0.005,&amp;#10;        fillColor=&quot;lightgrey&quot;,&amp;#10;        borderColor=&quot;darkgrey&quot;,&amp;#10;        color=&quot;black&quot;,&amp;#10;        colorSpace=&quot;rgb&quot;,&amp;#10;        opacity=None,&amp;#10;        bold=True,&amp;#10;        italic=False,&amp;#10;        padding=None,&amp;#10;        anchor=&quot;center&quot;,&amp;#10;        name=name&amp;#10;    )&amp;#10;&amp;#10;def make_sound(name, filepath):&amp;#10;    return sound.Sound(&amp;#10;        win=win,&amp;#10;        value=filepath,&amp;#10;        secs=-1,&amp;#10;        stereo=True,&amp;#10;        hamming=True,&amp;#10;        name=name&amp;#10;    )&amp;#10;&amp;#10;def make_img(name, file_name, pos, size, opacity):&amp;#10;    return visual.ImageStim(&amp;#10;        win=win,&amp;#10;        name=name,&amp;#10;        image=file_name,&amp;#10;        pos=pos,&amp;#10;        size=size,&amp;#10;        opacity=opacity&amp;#10;    )&amp;#10;&amp;#10;def make_slide(name, pos=(0, 0), size=SLIDE_SIZE):&amp;#10;    return make_img(&amp;#10;        name,&amp;#10;        f&quot;{SLIDES_DIR}/{name}.png&quot;,&amp;#10;        pos, size, 1&amp;#10;    )&amp;#10;&amp;#10;# ---&amp;#10;&amp;#10;def within_box(obj, box):&amp;#10;    &quot;&quot;&quot;&amp;#10;    Determine if object is within box&amp;#10;    - Squared difference in x (and y) coordinates &amp;#10;    should be less than the square of half the &amp;#10;    box width (and height)&amp;#10;    - That would mean the center of the object is&amp;#10;    within the box boundaries&amp;#10;    &quot;&quot;&quot;&amp;#10;    obj_x, obj_y = obj.pos&amp;#10;    box_x, box_y = box.pos&amp;#10;    box_w, box_h = box.size&amp;#10;    dx, dy = obj_x - box_x, obj_y - box_y&amp;#10;    hw, hh = box_w / 2, box_h / 2&amp;#10;    return dx * dx &lt; hw * hw and dy * dy &lt; hh * hh&amp;#10;&amp;#10;def snapped(obj1, obj2, func=within_box):&amp;#10;    &quot;&quot;&quot;&amp;#10;    Determine if obj1 snapped to center of obj2&amp;#10;    - Check if obj1 is 'near' obj2, based on func&amp;#10;    - If yes, set the obj1's position to be &amp;#10;    equal to obj2's position and return True&amp;#10;    - Otherwise, do nothing and return False&amp;#10;    &quot;&quot;&quot;&amp;#10;    if func(obj1, obj2):&amp;#10;        obj1.pos = obj2.pos&amp;#10;        return True&amp;#10;    return False&amp;#10;&amp;#10;def dist_sq(x1, y1, x2, y2):&amp;#10;    dx, dy = x2 - x1, y2 - y1&amp;#10;    return (dx * dx) + (dy * dy)&amp;#10;&amp;#10;def round_dp(x, dp=5):&amp;#10;    num, = (10 ** dp),&amp;#10;    return round(x * num) / num&amp;#10;" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="function make_button(name, text, pos, size) {&amp;#10;    return new visual.ButtonStim({&quot;win&quot;: psychoJS.window, &quot;text&quot;: text, &quot;pos&quot;: pos, &quot;letterHeight&quot;: 0.05, &quot;size&quot;: size, &quot;borderWidth&quot;: 0.005, &quot;fillColor&quot;: &quot;lightgrey&quot;, &quot;borderColor&quot;: &quot;darkgrey&quot;, &quot;color&quot;: &quot;black&quot;, &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;opacity&quot;: null, &quot;bold&quot;: true, &quot;italic&quot;: false, &quot;padding&quot;: null, &quot;anchor&quot;: &quot;center&quot;, &quot;name&quot;: name});&amp;#10;}&amp;#10;function make_sound(name, filepath) {&amp;#10;    return new sound.Sound({&quot;win&quot;: psychoJS.window, &quot;value&quot;: filepath, &quot;secs&quot;: (- 1), &quot;stereo&quot;: true, &quot;hamming&quot;: true, &quot;name&quot;: name});&amp;#10;}&amp;#10;function make_img(name, file_name, pos, size, opacity) {&amp;#10;    return new visual.ImageStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: name, &quot;image&quot;: file_name, &quot;pos&quot;: pos, &quot;size&quot;: size, &quot;opacity&quot;: opacity});&amp;#10;}&amp;#10;function make_slide(name, pos = [0, 0], size = SLIDE_SIZE) {&amp;#10;    return make_img(name, `${SLIDES_DIR}/${name}.png`, pos, size, 1);&amp;#10;}&amp;#10;function within_box(obj, box) {&amp;#10;    /*&amp;#10;    Determine if object is within box&amp;#10;    - Squared difference in x (and y) coordinates&amp;#10;    should be less than the square of half the&amp;#10;    box width (and height)&amp;#10;    - That would mean the center of the object is&amp;#10;    within the box boundaries&amp;#10;    */&amp;#10;    var box_h, box_w, box_x, box_y, dx, dy, hh, hw, obj_x, obj_y;&amp;#10;    [obj_x, obj_y] = obj.pos;&amp;#10;    [box_x, box_y] = box.pos;&amp;#10;    [box_w, box_h] = box.size;&amp;#10;    [dx, dy] = [(obj_x - box_x), (obj_y - box_y)];&amp;#10;    [hw, hh] = [(box_w / 2), (box_h / 2)];&amp;#10;    return (((dx * dx) &lt; (hw * hw)) &amp;&amp; ((dy * dy) &lt; (hh * hh)));&amp;#10;}&amp;#10;function snapped(obj1, obj2, func = within_box) {&amp;#10;    /*&amp;#10;    Determine if obj1 snapped to center of obj2&amp;#10;    - Check if obj1 is 'near' obj2, based on func&amp;#10;    - If yes, set the obj1's position to be&amp;#10;    equal to obj2's position and return True&amp;#10;    - Otherwise, do nothing and return False&amp;#10;    */&amp;#10;    if (func(obj1, obj2)) {&amp;#10;        obj1.pos = obj2.pos;&amp;#10;        return true;&amp;#10;    }&amp;#10;    return false;&amp;#10;}&amp;#10;function dist_sq(x1, y1, x2, y2) {&amp;#10;    var dx, dy;&amp;#10;    [dx, dy] = [(x2 - x1), (y2 - y1)];&amp;#10;    return ((dx * dx) + (dy * dy));&amp;#10;}&amp;#10;function round_dp(x, dp = 5) {&amp;#10;    var num;&amp;#10;    [num] = [Math.pow(10, dp)];&amp;#10;    return (Math.round((x * num)) / num);&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="functions_g" valType="code"/>
      </CodeComponent>
      <TextComponent name="begin_text">
        <Param name="color" updates="constant" val="black" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.02" valType="num"/>
        <Param name="name" updates="None" val="begin_text" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0.6, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
    </Routine>
    <Routine name="slide">
      <CodeComponent name="slide_code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="if (((slideNum !== &quot;NA&quot;) &amp;&amp; (! skip_practice))) {&amp;#10;    slide = make_slide(slideNum);&amp;#10;    slide.autoDraw = true;&amp;#10;    if (USE_AUDIO) {&amp;#10;        if ((tryNum === 1)) {&amp;#10;            aud_file = `${AUD_DIR}/rule-${ruleNum}-practice.m4a`;&amp;#10;        } else {&amp;#10;            if ((tryNum === &quot;NA&quot;)) {&amp;#10;                aud_file = `${AUD_DIR}/trials-go.m4a`;&amp;#10;            } else {&amp;#10;                aud_file = `${AUD_DIR}/trials-practice-again.m4a`;&amp;#10;            }&amp;#10;        }&amp;#10;        SOUND = make_sound(&quot;practice&quot;, aud_file);&amp;#10;        SOUND_DUR = SOUND.getDuration();&amp;#10;        SOUND_T = 0;&amp;#10;        SOUND.play();&amp;#10;    }&amp;#10;} else {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;if (SHOW_DEBUG) {&amp;#10;    SKIP.autoDraw = true;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="&amp;#10;# Rule 1 practice: can cut around 12 seconds&amp;#10;# Rule 1 test: can cut around 11 seconds&amp;#10;# ...&amp;#10;# Forget it, just stick to end of audio clip...&amp;#10;&amp;#10;if slideNum != &quot;NA&quot; and not skip_practice:&amp;#10;    slide = make_slide(slideNum)&amp;#10;    slide.autoDraw = True&amp;#10;    if USE_AUDIO:&amp;#10;        if tryNum == 1:&amp;#10;            aud_file = f&quot;{AUD_DIR}/rule-{ruleNum}-practice.m4a&quot;&amp;#10;        elif tryNum == &quot;NA&quot;:&amp;#10;            aud_file = f&quot;{AUD_DIR}/trials-go.m4a&quot;&amp;#10;        else:&amp;#10;            aud_file = f&quot;{AUD_DIR}/trials-practice-again.m4a&quot;&amp;#10;        SOUND = make_sound(&quot;practice&quot;, aud_file)&amp;#10;        SOUND_DUR = SOUND.getDuration()&amp;#10;        SOUND_T = 0&amp;#10;        SOUND.play()&amp;#10;else:&amp;#10;    continueRoutine = False&amp;#10;&amp;#10;if SHOW_DEBUG:&amp;#10;    SKIP.autoDraw = True&amp;#10;" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="&amp;#10;if slideNum != &quot;NA&quot; and not skip_practice and t &gt; SOUND_DUR:&amp;#10;    continueRoutine = False&amp;#10;&amp;#10;if SHOW_DEBUG:&amp;#10;    slide_text.text = f&quot;&quot;&quot;&amp;#10;aud_file = {aud_file}&amp;#10;SOUND_DUR = {round(SOUND_DUR, 3)}&amp;#10;t = {round(t, 3)}&amp;#10;&quot;&quot;&quot;&amp;#10;    MOUSE_L = MOUSE.getPressed()[0]&amp;#10;    if MOUSE_L_prev != MOUSE_L:&amp;#10;        MOUSE_L_prev = MOUSE_L&amp;#10;        if MOUSE_L and SKIP.contains(MOUSE):&amp;#10;            continueRoutine = False&amp;#10;" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="if ((((slideNum !== &quot;NA&quot;) &amp;&amp; (! skip_practice)) &amp;&amp; (t &gt; SOUND_DUR))) {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;if (SHOW_DEBUG) {&amp;#10;    slide_text.text = `&amp;#10;aud_file = ${aud_file}&amp;#10;SOUND_DUR = ${round(SOUND_DUR, 3)}&amp;#10;t = ${round(t, 3)}`&amp;#10;;&amp;#10;    MOUSE_L = MOUSE.getPressed()[0];&amp;#10;    if ((MOUSE_L_prev !== MOUSE_L)) {&amp;#10;        MOUSE_L_prev = MOUSE_L;&amp;#10;        if ((MOUSE_L &amp;&amp; SKIP.contains(MOUSE))) {&amp;#10;            continueRoutine = false;&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="if (((slideNum !== &quot;NA&quot;) &amp;&amp; (! skip_practice))) {&amp;#10;    slide.autoDraw = false;&amp;#10;    if (USE_AUDIO) {&amp;#10;        SOUND.stop();&amp;#10;    }&amp;#10;}&amp;#10;if (SHOW_DEBUG) {&amp;#10;    SKIP.autoDraw = false;&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="&amp;#10;if slideNum != &quot;NA&quot; and not skip_practice:&amp;#10;    slide.autoDraw = False&amp;#10;    if USE_AUDIO:&amp;#10;        SOUND.stop()&amp;#10;&amp;#10;if SHOW_DEBUG:&amp;#10;    SKIP.autoDraw = False&amp;#10;" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="slide_code" valType="code"/>
      </CodeComponent>
      <TextComponent name="slide_text">
        <Param name="color" updates="constant" val="black" valType="color"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="contrast" updates="constant" val="1" valType="num"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="None" valType="str"/>
        <Param name="font" updates="constant" val="Open Sans" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.02" valType="num"/>
        <Param name="name" updates="None" val="slide_text" valType="code"/>
        <Param name="opacity" updates="constant" val="" valType="num"/>
        <Param name="ori" updates="constant" val="0" valType="num"/>
        <Param name="pos" updates="constant" val="(0.6, 0)" valType="list"/>
        <Param name="saveStartStop" updates="None" val="False" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="" valType="str"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="num"/>
      </TextComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="begin"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="0:" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="$SEQ_FILE" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="False" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="gate"/>
    <Routine name="slide"/>
    <Routine name="trial"/>
    <LoopTerminator name="trials"/>
  </Flow>
</PsychoPy2experiment>
